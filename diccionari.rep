struct node {
    char _lletra; /* Representa una lletra d'una paraula del diccionari. El símbol # representa el final d'una paraula. */
    node* _esq; /* Punter al subarbre esquerre. Conté nodes amb lletres menors a _lletra segons l'ordre lexicogràfic. */
    node* _cen; /* Punter al subarbre central. Representa la continuació de la paraula si _lletra és part d'una paraula del diccionari. */
    node* _dre; /* Punter al subarbre dret. Conté nodes amb lletres majors a _lletra segons l'ordre lexicogràfic. */
};

node* _arrel; /* Apunta al node arrel del TST. És el punt d'entrada i cerca del diccionari. 
               S'inicialitza _arrel posant que tingui el símbol '#' ja que el diccionari sempre té la paraula buida.*/
nat _numPal; /* Nombre total de paraules al diccionari. Aquest atribut fa que la funció num_pal() tingui cost constant.
               S'inicialitza _numPal a 1 ja que el diccionari sempre té la paraula buida. */

/**
 * Justificació de la representació:
 * Hem escollit implementar un Ternary Search Tree (TST) per a la nostra classe diccionari degut
 * a la seva eficiència temporal i espacial.
 * El TST ofereix una cerca ràpida, proporcional a la mida de la paraula que es consulta, ja que els BSTs
 * que es formen són petits i en el pitjor cas (que aquests BSTs siguin desequilibrats) a cada nivell 
 * s'exploren 27 nodes. De fet, hem implementat una versió que utilitza un altre atribut i unes 
 * funcions més (rotacions) per inserir de manera equilibrada al TST però després hem comparat el temps 
 * d'execució i la millora no és significativa i creiem que la complexitat del codi podria conduir a errors
 * a jocs de prova més grans. El TST tradicional manté la simplicitat en la seva implementació, sense 
 * necessitat de balanceig com en ja que els BSTs que es formen no són prou grans per voler corregir el 
 * seu euqilibri. 
 * Que les consultes siguin proporcionals a la mida de la paraula a cercar
 * és el que més ens interessa per a les funcions prefix i satisfan_patro.
 * El TST profita l'ordenació lexicogràfica de les paraules i la cerca per prefixos. Comparat amb els tries, 
 * el TST és més eficient en memòria, ja que no necessita espai addicional per fils buits.
 * Tampoc hem escollit una taula de hash ja que no permet una cerca eficient per prefixos ni patrons, 
 * que és clau per al nostre diccionari, i per la complexitat que implica veure com gerstionar les
 * col·lisions i la redispersió a més del gran cost en memòria. Tampoc hem considerat un AVL, ja que 
 * no és tan eficient per a la cerca de prefixos com el TST. I un monticle no és adequat perquè es 
 * fa difícil obtenir paraules ordenades o cercar per prefixos de manera eficient.
 */

/* Pre:  arrel pot ser un punter nul o bé apuntar a un node d'un TST correctament construït.
   Post: Retorna un punter a un nou arbre que és una còpia exacta del subarbre arrelat a arrel. 
   Llança un error si ja no hi ha més memòria. */
node* copia(node* arrel) throw(error);

/* Pre:  arrel pot ser un punter nul o bé apuntar a un node d'un TST correctament construït.
   Post: Allibera la memòria de tots els nodes del subarbre arrelat a arrel. Si arrel és nul, no fa res. */
void esborra(node* arrel);

/* Pre:  arrel pot ser un punter nul o bé apuntar a un node d'un TST correctament construït. 
          paraulaNova no és buida i conté el símbol '#' al final.
          index és un natural i index <= paraulaNova.size()
   Post: Insereix la paraulaNova al subarbre arrelat a arrel si no existia prèviament. 
         Retorna el punter a l'arrel actualitzada del subarbre. */
node* insereix_aux(node* arrel, const string& paraulaNova, nat index) throw(error);

/* Pre: arrel pot ser nul o apuntar a un node d'un TST. 
   p no és buida i representa el prefix a buscar. 
   index és un natural i index <= p.size()
   paraula és un string on paraula.size() <= p.size() i és on anem guardant el resultat acumulat
   Post: Paraula conté el prefix més llarg que coincideix amb el prefix p en el diccionari. */
void prefix_aux(node* arrel, const string& p, nat index, string& paraula) const throw(error);

/* Pre:  arrel pot ser un punter nul o bé apuntar a un node d'un TST correctament construït. 
          patro és un vector d'strings.
          pos indica la posició actual en el vector patro, és un natural i pos <= patro.size()
          actual és un string temporal per construir paraules
   Post: Afegeix a la llista L totes les paraules del subarbre arrelat a arrel que satisfan el patró especificat per patro. */
void satisfan_patro_aux(node* arrel, const vector<string>& patro, nat pos, string& actual, list<string>& L) const throw(error);

/* Pre:  arrel pot ser un punter nul o bé apuntar a un node d'un TST correctament construït.
          k indica la longitud mínima de les paraules a incloure a L.
          nivell indica la profunditat actual en l'arbre, i paraula conté el prefix parcial actual.
   Post: Afegeix a la llista L totes les paraules del subarbre arrelat a arrel amb longitud >= k en ordre alfabètic. */
void llista_paraules_aux(node* arrel, nat k, list<string>& L, nat nivell, string paraula) const throw(error);